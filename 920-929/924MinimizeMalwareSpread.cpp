/*
924. Minimize Malware Spread
In a network of nodes, each node i is directly connected to another node j if
and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.  Whenever two nodes are
directly connected and at least one of those two nodes is infected by malware,
both nodes will be infected by malware.  This spread of malware will continue
until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the
entire network, after the spread of malware stops.

We will remove one node from the initial list.  Return the node that if removed,
would minimize M(initial).  If multiple nodes could be removed to minimize
M(initial), return such a node with the smallest index.

Note that if a node was removed from the initial list of infected nodes, it may
still be infected later as a result of the malware spread.

Example 1:

Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:

Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:

Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Note:

  1 < graph.length = graph[0].length <= 300
  0 <= graph[i][j] == graph[j][i] <= 1
  graph[i][i] = 1
  1 <= initial.length < graph.length
  0 <= initial[i] < graph.length
/*
  Submission Date: 2019-02-04
  Runtime: 168 ms
  Difficulty: HARD
*/
#include <cassert>
#include <climits>
#include <iostream>
#include <unordered_map>
#include <vector>

using namespace std;

template <typename T>
class UnionFind {
  unordered_map<T, int> rank_, size_;
  unordered_map<T, T> parent_;

 public:
  bool IsWithinSet(T e) { return parent_.count(e); }

  void CreateSet(T e) {
    assert(!IsWithinSet(e));
    parent_[e] = e;
    rank_[e] = 0;
    size_[e] = 1;
  }

  T Find(T e) {
    if (parent_[e] != e) {
      parent_[e] = Find(parent_[e]);
    }
    return parent_[e];
  }
  int GetSize(T e) { return size_[Find(e)]; }

  bool Union(T e1, T e2) {
    T e1_root = Find(e1);
    T e2_root = Find(e2);

    if (e1_root == e2_root) return false;  // same root

    if (rank_[e1_root] < rank_[e2_root]) {
      parent_[e1_root] = e2_root;
      size_[e2_root] += size_[e1_root];
    } else {
      parent_[e2_root] = e1_root;
      size_[e1_root] += size_[e2_root];
      if (rank_[e1_root] == rank_[e2_root]) {
        rank_[e1_root]++;
      }
    }

    return true;
  }
};

class Solution {
 public:
  int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
    int N = graph.size();
    UnionFind<int> uf;
    for (int i = 0; i < N; i++) uf.CreateSet(i);
    for (int i = 0; i < N; i++) {
      for (int j = 0; j < N; j++) {
        if (graph[i][j]) uf.Union(i, j);
      }
    }

    unordered_map<int, vector<int>> parent_to_children;
    int min_m = INT_MAX;
    for (const auto& m : initial) {
      parent_to_children[uf.Find(m)].push_back(m);
      min_m = min(min_m, m);
    }

    int largest_machine = -1;
    for (const auto& kv : parent_to_children) {
      // for connected components that with more than one initial machine, they
      // should be discarded
      if (kv.second.size() != 1) continue;
      int m = kv.second.front();
      if (largest_machine == -1) {
        largest_machine = m;
        continue;
      }

      // this component only has one machine, so removing it would result in
      // uf.GetSize(m) number of machines saved.
      int max_size = uf.GetSize(largest_machine);
      int curr_size = uf.GetSize(m);
      if (curr_size == max_size) {
        largest_machine = min(largest_machine, m);
      } else if (curr_size > max_size) {
        largest_machine = m;
      }
    }

    return (largest_machine == -1) ? min_m : largest_machine;
  }
};

int main() { return 0; }
