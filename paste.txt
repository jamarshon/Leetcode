var d = [
    "1. Two Sum",
    "2. Add Two Numbers",
    "3. Longest Substring Without Repeating Characters",
    "4. Median of Two Sorted Arrays",
    "5. Longest Palindromic Substring",
    "6. ZigZag Conversion",
    "7. Reverse Integer",
    "8. String to Integer (atoi)",
    "9. Palindrome Number",
    "10. Regular Expression Matching",
    "11. Container With Most Water",
    "12. Integer to Roman",
    "13. Roman to Integer",
    "14. Longest Common Prefix",
    "15. 3Sum",
    "16. 3Sum Closest",
    "17. Letter Combinations of a Phone Number",
    "18. 4Sum",
    "19. Remove Nth Node From End of List",
    "20. Valid Parentheses",
    "21. Merge Two Sorted Lists",
    "22. Generate Parentheses",
    "23. Merge k Sorted Lists",
    "24. Swap Nodes in Pairs",
    "25. Reverse Nodes in k-Group",
    "26. Remove Duplicates from Sorted Array",
    "27. Remove Element",
    "28. Implement strStr()",
    "29. Divide Two Integers",
    "30. Substring with Concatenation of All Words",
    "31. Next Permutation",
    "32. Longest Valid Parentheses",
    "33. Search in Rotated Sorted Array",
    "34. Search for a Range",
    "35. Search Insert Position",
    "36. Valid Sudoku",
    "37. Sudoku Solver",
    "38. Count and Say",
    "39. Combination Sum",
    "40. Combination Sum II",
    "41. First Missing Positive",
    "42. Trapping Rain Water",
    "43. Multiply Strings",
    "44. Wildcard Matching",
    "45. Jump Game II",
    "46. Permutations",
    "47. Permutations II",
    "48. Rotate Image",
    "49. Group Anagrams",
    "50. Pow(x, n)",
    "51. N-Queens",
    "52. N-Queens II",
    "53. Maximum Subarray",
    "54. Spiral Matrix",
    "55. Jump Game",
    "56. Merge Intervals",
    "57. Insert Interval",
    "58. Length of Last Word",
    "59. Spiral Matrix II",
    "60. Permutation Sequence",
    "61. Rotate List",
    "62. Unique Paths",
    "63. Unique Paths II",
    "64. Minimum Path Sum",
    "65. Valid Number",
    "66. Plus One",
    "67. Add Binary",
    "68. Text Justification",
    "69. Sqrt(x)",
    "70. Climbing Stairs",
    "71. Simplify Path",
    "72. Edit Distance",
    "73. Set Matrix Zeroes",
    "74. Search a 2D Matrix",
    "75. Sort Colors",
    "76. Minimum Window Substring",
    "77. Combinations",
    "78. Subsets",
    "79. Word Search",
    "80. Remove Duplicates from Sorted Array II",
    "81. Search in Rotated Sorted Array II",
    "82. Remove Duplicates from Sorted List II",
    "83. Remove Duplicates from Sorted List",
    "84. Largest Rectangle in Histogram",
    "85. Maximal Rectangle",
    "86. Partition List",
    "87. Scramble String",
    "88. Merge Sorted Array",
    "89. Gray Code",
    "90. Subsets II",
    "91. Decode Ways",
    "92. Reverse Linked List II",
    "93. Restore IP Addresses",
    "94. Binary Tree Inorder Traversal",
    "95. Unique Binary Search Trees II",
    "96. Unique Binary Search Trees",
    "97. Interleaving String",
    "98. Validate Binary Search Tree",
    "99. Recover Binary Search Tree",
    "100. Same Tree",
    "101. Symmetric Tree",
    "102. Binary Tree Level Order Traversal",
    "103. Binary Tree Zigzag Level Order Traversal",
    "104. Maximum Depth of Binary Tree",
    "105. Construct Binary Tree from Preorder and Inorder Traversal",
    "106. Construct Binary Tree from Inorder and Postorder Traversal",
    "107. Binary Tree Level Order Traversal II",
    "108. Convert Sorted Array to Binary Search Tree",
    "109. Convert Sorted List to Binary Search Tree",
    "110. Balanced Binary Tree",
    "111. Minimum Depth of Binary Tree",
    "112. Path Sum",
    "113. Path Sum II",
    "114. Flatten Binary Tree to Linked List",
    "115. Distinct Subsequences",
    "116. Populating Next Right Pointers in Each Node",
    "117. Populating Next Right Pointers in Each Node II",
    "118. Pascal's Triangle",
    "119. Pascal's Triangle II",
    "120. Triangle",
    "121. Best Time to Buy and Sell Stock",
    "122. Best Time to Buy and Sell Stock II",
    "123. Best Time to Buy and Sell Stock III",
    "124. Binary Tree Maximum Path Sum",
    "125. Valid Palindrome",
    "126. Word Ladder II",
    "127. Word Ladder",
    "128. Longest Consecutive Sequence",
    "129. Sum Root to Leaf Numbers",
    "130. Surrounded Regions",
    "131. Palindrome Partitioning",
    "132. Palindrome Partitioning II",
    "133. Clone Graph",
    "134. Gas Station",
    "135. Candy",
    "136. Single Number",
    "137. Single Number II",
    "138. Copy List with Random Pointer",
    "139. Word Break",
    "140. Word Break II",
    "141. Linked List Cycle",
    "142. Linked List Cycle II",
    "143. Reorder List",
    "144. Binary Tree Preorder Traversal",
    "145. Binary Tree Postorder Traversal",
    "146. LRU Cache",
    "147. Insertion Sort List",
    "148. Sort List",
    "149. Max Points on a Line",
    "150. Evaluate Reverse Polish Notation",
    "151. Reverse Words in a String",
    "152. Maximum Product Subarray",
    "153. Find Minimum in Rotated Sorted Array",
    "154. Find Minimum in Rotated Sorted Array II",
    "155. Min Stack",
    "160. Intersection of Two Linked Lists",
    "162. Find Peak Element",
    "164. Maximum Gap",
    "165. Compare Version Numbers",
    "166. Fraction to Recurring Decimal",
    "167. Two Sum II - Input array is sorted",
    "168. Excel Sheet Column Title",
    "169. Majority Element",
    "171. Excel Sheet Column Number",
    "172. Factorial Trailing Zeroes",
    "173. Binary Search Tree Iterator",
    "174. Dungeon Game",
    "179. Largest Number",
    "187. Repeated DNA Sequences",
    "188. Best Time to Buy and Sell Stock IV",
    "189. Rotate Array",
    "190. Reverse Bits",
    "191. Number of 1 Bits",
    "198. House Robber",
    "199. Binary Tree Right Side View",
    "200. Number of Islands",
    "201. Bitwise AND of Numbers Range",
    "202. Happy Number",
    "203. Remove Linked List Elements",
    "204. Count Primes",
    "205. Isomorphic Strings",
    "206. Reverse Linked List",
    "207. Course Schedule",
    "208. Implement Trie (Prefix Tree)",
    "209. Minimum Size Subarray Sum",
    "210. Course Schedule II",
    "211. Add and Search Word - Data structure design",
    "212. Word Search II",
    "213. House Robber II",
    "214. Shortest Palindrome",
    "215. Kth Largest Element in an Array",
    "216. Combination Sum III",
    "217. Contains Duplicate",
    "218. The Skyline Problem",
    "219. Contains Duplicate II",
    "220. Contains Duplicate III",
    "221. Maximal Square",
    "222. Count Complete Tree Nodes",
    "223. Rectangle Area",
    "224. Basic Calculator",
    "225. Implement Stack using Queues",
    "226. Invert Binary Tree",
    "227. Basic Calculator II",
    "228. Summary Ranges",
    "229. Majority Element II",
    "230. Kth Smallest Element in a BST",
    "231. Power of Two",
    "232. Implement Queue using Stacks",
    "233. Number of Digit One",
    "234. Palindrome Linked List",
    "235. Lowest Common Ancestor of a Binary Search Tree",
    "236. Lowest Common Ancestor of a Binary Tree",
    "237. Delete Node in a Linked List",
    "238. Product of Array Except Self",
    "239. Sliding Window Maximum",
    "240. Search a 2D Matrix II",
    "241. Different Ways to Add Parentheses",
    "242. Valid Anagram",
    "257. Binary Tree Paths",
    "258. Add Digits",
    "260. Single Number III",
    "263. Ugly Number",
    "264. Ugly Number II",
    "268. Missing Number",
    "273. Integer to English Words",
    "274. H-Index",
    "275. H-Index II",
    "278. First Bad Version",
    "279. Perfect Squares",
    "282. Expression Add Operators",
    "283. Move Zeroes",
    "284. Peeking Iterator",
    "287. Find the Duplicate Number",
    "289. Game of Life",
    "290. Word Pattern",
    "292. Nim Game",
    "295. Find Median from Data Stream",
    "297. Serialize and Deserialize Binary Tree",
    "299. Bulls and Cows",
    "300. Longest Increasing Subsequence",
    "301. Remove Invalid Parentheses",
    "303. Range Sum Query - Immutable",
    "304. Range Sum Query 2D - Immutable",
    "306. Additive Number",
    "307. Range Sum Query - Mutable",
    "309. Best Time to Buy and Sell Stock with Cooldown",
    "310. Minimum Height Trees",
    "313. Super Ugly Number",
    "315. Count of Smaller Numbers After Self",
    "318. Maximum Product of Word Lengths",
    "319. Bulb Switcher",
    "321. Create Maximum Number",
    "322. Coin Change",
    "326. Power of Three",
    "328. Odd Even Linked List",
    "329. Longest Increasing Path in a Matrix",
    "330. Patching Array",
    "331. Verify Preorder Serialization of a Binary Tree",
    "332. Reconstruct Itinerary",
    "334. Increasing Triplet Subsequence",
    "336. Palindrome Pairs",
    "337. House Robber III",
    "338. Counting Bits",
    "341. Flatten Nested List Iterator",
    "342. Power of Four",
    "343. Integer Break",
    "344. Reverse String",
    "345. Reverse Vowels of a String",
    "347. Top K Frequent Elements",
    "349. Intersection of Two Arrays",
    "350. Intersection of Two Arrays II",
    "354. Russian Doll Envelopes",
    "357. Count Numbers with Unique Digits",
    "367. Valid Perfect Square",
    "368. Largest Divisible Subset",
    "371. Sum of Two Integers",
    "373. Find K Pairs with Smallest Sums",
    "374. Guess Number Higher or Lower",
    "376. Wiggle Subsequence",
    "378. Kth Smallest Element in a Sorted Matrix",
    "383. Ransom Note",
    "386. Lexicographical Numbers",
    "387. First Unique Character in a String",
    "389. Find the Difference",
    "392. Is Subsequence",
    "394. Decode String",
    "404. Sum of Left Leaves",
    "405. Convert a Number to Hexadecimal",
    "409. Longest Palindrome",
    "412. Fizz Buzz",
    "414. Third Maximum Number",
    "419. Battleships in a Board",
    "433. Minimum Genetic Mutation",
    "438. Find All Anagrams in a String",
    "442. Find All Duplicates in an Array",
    "461. Hamming Distance",
    "463. Island Perimeter",
    "476. Number Complement",
    "491. Increasing Subsequences",
    "496. Next Greater Element I",
    "500. Keyboard Row",
    "520. Detect Capital",
    "521. Longest Uncommon Subsequence I",
    "525. Contiguous Array",
    "536. Construct Binary Tree from String",
    "539. Minimum Time Difference",
    "541. Reverse String II",
    "557. Reverse Words in a String III",
    "561. Array Partition I",
    "565. Array Nesting",
    "566. Reshape the Matrix",
    "567. Permutation in String",
    "575. Distribute Candies",
    "581. Shortest Unsorted Continuous Subarray",
    "582. Kill Process",
    "583. Delete Operation for Two Strings",
    "592. Fraction Addition and Subtraction",
    "593. Valid Square",
    "593. Valid Square",
    "594. Longest Harmonious Subsequence",
    "598. Range Addition II",
    "599. Minimum Index Sum of Two Lists",
    "604. Design Compressed String Iterator",
    "605. Can Place Flowers",
    "606. Construct String from Binary Tree",
    "609. Find Duplicate File in System",
    "611. Valid Triangle Number",
    "617. Merge Two Binary Trees",
    "623. Add One Row to Tree",
    "624. Maximum Distance in Arrays",
    "628. Maximum Product of Three Numbers",
    "633. Sum of Square Numbers",
    "636. Exclusive Time of Functions",
    "637. Average of Levels in Binary Tree",
    "638. Shopping Offers",
    "640. Solve the Equation",
    "643. Maximum Average Subarray I",
    "645. Set Mismatch",
    "646. Maximum Length of Pair Chain",
    "647. Palindromic Substrings",
    "648. Replace Words",
    "649. Dota2 Senate",
    "650. 2 Keys Keyboard",
    "652. Find Duplicate Subtrees",
    "653. Two Sum IV - Input is a BST",
    "654. Maximum Binary Tree",
    "655. Print Binary Tree",
    "656. Coin Path",
    "657. Judge Route Circle",
    "662. Maximum Width of Binary Tree",
    "669. Trim a Binary Search Tree",
    "676. Implement Magic Dictionary",
    "682. Baseball Game",
    "687. Longest Univalue Path",
    "692. Top K Frequent Words",
    "693. Binary Number with Alternating Bits",
    "696. Count Binary Substrings",
    "697. Degree of an Array",
    "720. Longest Word in Dictionary",
    "728. Self Dividing Numbers",
    "762. Prime Number of Set Bits in Binary Representation",
    "766. Toeplitz Matrix",
    "771. Jewels and Stones",
    "804. Unique Morse Code Words",
    "806. Number of Lines To Write String",
    "811. Subdomain Visit Count",
    "821. Shortest Distance to a Character",
    "824. Goat Latin",
    "832. Flipping an Image",
    "836. Rectangle Overlap"
]; 
var f1 = function(d) {
function httpGet(theUrl) {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open( "GET", theUrl, false ); // false for synchronous request
    xmlHttp.send( null );
    return JSON.parse(xmlHttp.responseText);
}

var url = 'https://leetcode.com/api/problems/algorithms/';
var a = httpGet(url);

var b = a.stat_status_pairs;
var main_url = 'https://leetcode.com/problems/'
var parse = function(arr) {
    var res = arr.reduce((memo, x) => {
        var row = {
            id: x.stat.frontend_question_id, 
            name: x.stat.question__title,
            url: main_url + x.stat.question__title_slug + '/'
        };
        memo.push(row);
        return memo;
    }, []);
    res.sort((a,b) => a.id - b.id);
    return res;
};
 
var include_money = false;
var not_completed = [];
var completed = [];
var not_attempted = [];
 
b.forEach(x => {
    var should_continue = x.paid_only && !include_money;
    switch(x.status) {
        case "ac":
            completed.push(x);
            break;
        case "notac":
            if(should_continue) return;
            not_completed.push(x);
            break;
        case null:
            if(should_continue) return;
            not_attempted.push(x);
            break;
       default:
            console.log(x);
            console.assert(false);
            break;
   }
});
 
window.not_completed_p = parse(not_completed);
window.completed_p = parse(completed);
window.not_attempted_p = parse(not_attempted);
 
var diag = `not_completed = ${window.not_completed_p.length},\ncompleted = ${window.completed_p.length},\nnot_attempted = ${window.not_attempted_p.length}`;
console.log(diag);

var c_dict = {};
for(var i = 0; i < window.completed_p.length; i++) c_dict[window.completed_p[i].id] = true;

// var d = [];
var d_dict = {};
d = d.map(x => parseInt(x.slice(0, x.indexOf('.'))));
for(var i = 0; i < d.length; i++) d_dict[d[i]] = true;

console.log("not in website");
for(var k in d_dict) {
    if(typeof c_dict[k] === 'undefined') console.log(k);
}

console.log("not saved");
for(var k in c_dict) {
    if(typeof d_dict[k] === 'undefined') console.log(k);
}
};

f1(d)